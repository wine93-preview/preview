# Copyright (c) 2023 dingodb.com, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.23.1 FATAL_ERROR)
project(dingofs-third-party C CXX)

SET(THIRD_PARTY_INSTALL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/installed)

include(ExternalProject)

SET(INCBIN_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/incbin)
ExternalProject_Add(incbin
    PREFIX incbin
    SOURCE_DIR "${INCBIN_SOURCES_DIR}"
    BINARY_DIR "${INCBIN_SOURCES_DIR}"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory ${THIRD_PARTY_INSTALL_PATH}/include
    COMMAND cp ${INCBIN_SOURCES_DIR}/incbin.h ${THIRD_PARTY_INSTALL_PATH}/include
)

SET(LIBFIU_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libfiu)
ExternalProject_Add(libfiu
    PREFIX libfiu
    SOURCE_DIR ${LIBFIU_SOURCES_DIR}
    BUILD_IN_SOURCE ON
    CONFIGURE_COMMAND ""
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> $(MAKE) PREFIX=${THIRD_PARTY_INSTALL_PATH} install
)

SET(OPENSSL_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/openssl)
SET(OPENSSL_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/openssl/build)
ExternalProject_Add(openssl
    PREFIX openssl
    SOURCE_DIR ${OPENSSL_SOURCES_DIR}
    BINARY_DIR ${OPENSSL_BINARY_DIR}
    CONFIGURE_COMMAND sh ${OPENSSL_SOURCES_DIR}/config -DOPENSSL_NO_SCTP -DOPENSSL_NO_KTLS  -DOPENSSL_USE_NODELETE -DOPENSSL_PIC -no-shared --prefix=${THIRD_PARTY_INSTALL_PATH} --libdir=${THIRD_PARTY_INSTALL_PATH}/lib
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND ${CMAKE_COMMAND} -E chdir ${OPENSSL_BINARY_DIR} $(MAKE) install_sw
)

set(ZLIB_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/zlib)
set(ZLIB_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/zlib/build)

file(WRITE ${ZLIB_BINARY_DIR}/copy_repo.sh
     "mkdir -p ${ZLIB_BINARY_DIR} && cp -rf ${ZLIB_SOURCES_DIR}/* ${ZLIB_BINARY_DIR}/")

execute_process(COMMAND sh ${ZLIB_BINARY_DIR}/copy_repo.sh)

ExternalProject_Add(zlib
    PREFIX zlib
    SOURCE_DIR ${ZLIB_BINARY_DIR}
    BINARY_DIR ${ZLIB_BINARY_DIR}
    CMAKE_ARGS
      -DBUILD_SHARED_LIBS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

ExternalProject_Add(gflags
   PREFIX gflags
   SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/gflags
   CMAKE_ARGS
       -DBUILD_STATIC_LIBS=ON
       -DBUILD_TESTING=OFF
       -DINSTALL_HEADERS=ON
   CMAKE_CACHE_ARGS
       -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
       -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
       -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

# version must less than 0.7.0, because brpc depends
ExternalProject_Add(glog
    PREFIX glog
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/glog
    CMAKE_ARGS
        -DBUILD_TESTING=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DWITH_GFLAGS=ON
        -DWITH_UNWIND=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -Dgflags_DIR:STRING=${THIRD_PARTY_INSTALL_PATH}/lib/cmake/gflags
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
    DEPENDS gflags
)

ExternalProject_Add(gtest
    PREFIX gtest
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/googletest
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

ExternalProject_Add(fmt
    PREFIX fmt
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/fmt
    CMAKE_ARGS
        -DFMT_TEST=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

ExternalProject_Add(jsoncpp
    PREFIX jsoncpp
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/jsoncpp
    CMAKE_ARGS
        -DJSONCPP_WITH_TESTS=OFF
        -DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_OBJECT_LIBS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

ExternalProject_Add(crc32c
    PREFIX crc32c
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/crc32c
    CMAKE_ARGS
        -DCRC32C_BUILD_TESTS=OFF
        -DCRC32C_BUILD_BENCHMARKS=OFF
        -DCRC32C_USE_GLOG=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

ExternalProject_Add(memcache
    PREFIX memcache
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/memcache
    CMAKE_ARGS
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_DOCS=OFF
        -DBUILD_DOCSONLY=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

ExternalProject_Add(spdlog
    PREFIX spdlog
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/spdlog
    CMAKE_ARGS
        -DSPDLOG_BUILD_SHARED=OFF
        -DSPDLOG_BUILD_EXAMPLE_HO=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

# ExternalProject_Add(absl
#     PREFIX absl
#     SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/abseil-cpp"
#     CMAKE_CACHE_ARGS
#         -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
#         -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
#         -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
# )

ExternalProject_Add(protobuf
    PREFIX protobuf
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/protobuf"
    # BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/protobuf/build"
    CMAKE_ARGS
        -Dprotobuf_BUILD_SHARED_LIBS=OFF
        -DCMAKE_PREFIX_PATH=${THIRD_PARTY_INSTALL_PATH}
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -Dprotobuf_BUILD_TESTS:BOOL=OFF
        -Dprotobuf_WITH_ZLIB:BOOL=ON
        -DZLIB_ROOT:STRING=${THIRD_PARTY_INSTALL_PATH}
        # -Dprotobuf_ABSL_PROVIDER:STRING=package
        # -Dabsl_DIR:STRING=${THIRD_PARTY_INSTALL_PATH}/lib/cmake/absl
        # -Dprotobuf_JSONCPP_PROVIDER:STRING=package
        -Dprotobuf_MSVC_STATIC_RUNTIME:BOOL=OFF
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=lib # v21.12
        # -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib  # new version
  DEPENDS zlib jsoncpp
)

# use by brpc
ExternalProject_Add(snappy
    PREFIX snappy
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/snappy
    CMAKE_ARGS
      -DSNAPPY_BUILD_TESTS=OFF
      -DSNAPPY_BUILD_BENCHMARKS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

# use by brpc
ExternalProject_Add(leveldb
    PREFIX leveldb
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/leveldb
    CMAKE_ARGS
      -DLEVELDB_BUILD_TESTS=OFF
      -DLEVELDB_BUILD_BENCHMARKS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)

ExternalProject_Add(rocksdb
    PREFIX rocksdb
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/rocksdb"
    CMAKE_ARGS
        -DCMAKE_PREFIX_PATH=${THIRD_PARTY_INSTALL_PATH}
        -DPORTABLE=ON
        -DWITH_SNAPPY=ON
        # -DWITH_LZ4=ON
        # -DWITH_ZSTD=ON
        -DWITH_ZLIB=ON
        -DWITH_RUNTIME_DEBUG=ON
        -DROCKSDB_BUILD_SHARED=OFF
        -DWITH_BENCHMARK_TOOLS=OFF
        -DWITH_TESTS=OFF
        -DWITH_CORE_TOOLS=OFF
        -DWITH_TOOLS=OFF
        -DWITH_TRACE_TOOLS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DZLIB_ROOT:STRING=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
  DEPENDS gflags zlib snappy
)

# If minimal .a is need, you can set  WITH_DEBUG_SYMBOLS=OFF
SET(BRPC_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/brpc/build)
ExternalProject_Add(brpc
    PREFIX brpc
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/brpc
    BINARY_DIR ${BRPC_BINARY_DIR}
    CMAKE_ARGS
      -DCMAKE_PREFIX_PATH=${THIRD_PARTY_INSTALL_PATH}
      -DWITH_GLOG=ON
      -DWITH_SNAPPY=ON
      -DDOWNLOAD_GTEST=OFF
      -DBUILD_BRPC_TOOLS=OFF
      -DWITH_DEBUG_SYMBOLS=OFF
      -DOPENSSL_USE_STATIC_LIBS=TRUE
    CMAKE_CACHE_ARGS
      -DOPENSSL_ROOT_DIR:PATH=${THIRD_PARTY_INSTALL_PATH}
      -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
      -Dgflags_DIR:STRING=${THIRD_PARTY_INSTALL_PATH}/lib/cmake/gflags
      -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
    BUILD_COMMAND $(MAKE) brpc-static
    INSTALL_COMMAND  ""
    COMMAND cp ${BRPC_BINARY_DIR}/output/lib/libbrpc.a ${THIRD_PARTY_INSTALL_PATH}/lib
    COMMAND cp -r ${BRPC_BINARY_DIR}/output/include ${THIRD_PARTY_INSTALL_PATH}
    DEPENDS zlib snappy protobuf leveldb gflags glog openssl
)

SET(BRAFT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/braft/build)
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -DUSE_BTHREAD_MUTEX)
ExternalProject_Add(braft
    PREFIX braft
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/braft
    BINARY_DIR ${BRAFT_BINARY_DIR}
    CMAKE_ARGS
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_PREFIX_PATH=${THIRD_PARTY_INSTALL_PATH}
        -DBRPC_WITH_GLOG=ON
        -Dgflags_DIR:STRING=${THIRD_PARTY_INSTALL_PATH}/lib/cmake/gflags
        -DWITH_DEBUG_SYMBOLS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
    BUILD_COMMAND $(MAKE) braft-static
    INSTALL_COMMAND ""
    COMMAND cp ${BRAFT_BINARY_DIR}/output/lib/libbraft.a ${THIRD_PARTY_INSTALL_PATH}/lib
    COMMAND cp -r ${BRAFT_BINARY_DIR}/output/include ${THIRD_PARTY_INSTALL_PATH}
    DEPENDS brpc
)

# used by aws
ExternalProject_Add(curl
   PREFIX curl
   SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/curl
   CMAKE_ARGS
       -DCMAKE_PREFIX_PATH=${THIRD_PARTY_INSTALL_PATH}
       -DBUILD_STATIC_LIBS=ON
       -DBUILD_CURL_EXE=OFF
       -DCURL_DISABLE_LDAP=ON
       -DBUILD_SHARED_LIBS=OFF
       -DBUILD_STATIC_CURL=OFF
       -DUSE_LIBIDN2=OFF
   CMAKE_CACHE_ARGS
       -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
       -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
       -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
    DEPENDS zlib openssl
)

ExternalProject_Add(aws-sdk-cpp
    PREFIX aws-sdk-cpp
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/aws-sdk-cpp
    CMAKE_ARGS
        -DCMAKE_PREFIX_PATH=${THIRD_PARTY_INSTALL_PATH}
        -DBUILD_SHARED_LIBS=OFF
        -DENABLE_TESTING=OFF
        -DAUTORUN_UNIT_TESTS=OFF
        -DBUILD_ONLY=s3
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
    DEPENDS curl zlib openssl
)

ExternalProject_Add(libuuid
    PREFIX libuuid
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libuuid-cmake
    CMAKE_ARGS
        -DCMAKE_PREFIX_PATH=${THIRD_PARTY_INSTALL_PATH}
        -DLIBUUID_STATIC=ON
        -DLIBUUID_SHARED=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${THIRD_PARTY_INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${THIRD_PARTY_INSTALL_PATH}/lib
)
